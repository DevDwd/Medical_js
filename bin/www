#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('BlogJs:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io').listen(server);
var author_list = [];
var list = [];


io.sockets.on('connection', function (socket) {
   /* body... */ 

   //envoi la liste des utilisateur connecté et l'affiche sur la page de messagerie /msg
   socket.emit('get_all_talker', author_list);
     // Dès qu'on nous donne un pseudo, on le stocke dans le socket
    socket.on('petit_nouveau', function(pseudo) {
        socket.pseudo = pseudo;
        author_list.push(pseudo);
        // On signale aux autres clients qu'il y a un nouveau venu
        socket.broadcast.emit('new_talker', pseudo);
    });

 //on ecoute la soummision d'un formulaire de message et on ajoute le message a la liste des autres messages
   socket.on('fill', function(data) {
    list.push({"author": socket.pseudo,"content":data.content,"date": getDateTime()});
    //on envoi le message a tous les autres
    socket.broadcast.emit('message', {"author": socket.pseudo,"content":data.content,"date": getDateTime()});
    socket.emit('message', {"author": socket.pseudo,"content":data.content,"date": getDateTime()});
    
   });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function getDateTime() {

    var date = new Date();

    var hour = date.getHours();
    hour = (hour < 10 ? "0" : "") + hour;

    var min  = date.getMinutes();
    min = (min < 10 ? "0" : "") + min;

    var sec  = date.getSeconds();
    sec = (sec < 10 ? "0" : "") + sec;

    var year = date.getFullYear();

    var month = date.getMonth() + 1;
    month = (month < 10 ? "0" : "") + month;

    var day  = date.getDate();
    day = (day < 10 ? "0" : "") + day;

    return year + "/" + month + "/" + day + "  " + hour + ":" + min + ":" + sec;

}
